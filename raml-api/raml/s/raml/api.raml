#%RAML 0.8
title: STARTUP API
version: 1.0
baseUri: http://api.startupsass.com/
protocols: [ HTTP, HTTPS ]
securedBy: [ oauth_2_0 ]

securitySchemes:
  - oauth_2_0: !include securitySchemes/oauth_2_0.yaml

schemas:
  - topic: !include schemas/topic-schema.json
  - topics: !include schemas/topics-schema.json
  - post: !include schemas/post-schema.json
  - posts: !include schemas/posts-schema.json
  - publisher: !include schemas/publisher-shcema.json
  - poster: !include schemas/poster-shcema.json
  - content: !include schemas/content-shcema.json
  - contentDetail: !include schemas/contentDetail-schema.json
  - fans: !include schemas/fans-schema.json
  - follow: !include schemas/follow-schema.json
  - liker: !include schemas/liker-schema.json
  - like-update: !include schemas/like-update-schema.json
  - review: !include schemas/review-schema.json
  - reviewer: !include schemas/reviewer-schema.json
  - error-schema: !include schemas/error-schema.json
  - update: !include schemas/update-schema.json

resourceTypes:
  - member: !include resourceTypes/member.yaml
  - baseResource: !include resourceTypes/baseResource.yaml
  - fieldSelectorMember: !include resourceTypes/fieldSelectorMember.yaml
  - fieldSelectors: !include resourceTypes/fieldSelectors.yaml
  - collection: !include resourceTypes/collections.yaml
  - fieldSelectorCollection: !include resourceTypes/fieldSelectorCollection.yaml

traits:
  - hasModifiedFilter: !include traits/hasModifiedFilter.yaml
  - hasSession: !include traits/hasSession.yaml
  - paged: !include traits/paged.yaml
  - oauth: !include traits/oauth2_0.yaml
  - common: !include traits/common.yaml

documentation:
  - title: 创业服务平台接口规范
    content: |
      Get: 获取资源的某个表述

      Post: 基于给定的表述信息，在当前资源的下一级创建新的资源

      Put: 用给定的表述信息替换资源的当前状态

      Delete: 销毁一个资源

      Patch: 根据提供的表述信息修改资源的部分状态。如果有某些资源状态在提供的表述中没有被提到， 这些状态就保持不变。类似于Put，但是允许对资源状态进行一些细粒度的改动

/topics:
  /~{field_selectors}:
    type:  { fieldSelectorCollection: {type : topic} }
    get:
      is: [ paged, oauth ]
      queryParameters:
        keywords:
          type: string
      responses:
        200:
          body:
            application/json:
              schema: topics
    post:
      is: [ hasSession, oauth ]
      body:
        application/json:
          schema: topic
      responses:
        200:
          description: ok
          body:
            application/json:
              schema: update
  /{topic_id}:
    type: { member: {type : topic} }
    get:
      is: [ oauth ]
      responses:
        200:
          body:
            application/json:
              schema: topic
    put:
      is: [ hasSession, oauth, hasModifiedFilter ]
      responses:
        200:
          body:
            application/json:
    patch:
      is: [ hasSession, oauth, hasModifiedFilter ]
      responses:
        200:
          body:
            application/json:
    /~:
      /posts{field_selectors}:
        type:  { fieldSelectorCollection: {type : post} }
        get:
          is: [ paged, oauth ]
          responses:
            200:
              body:
                application/json:
                  schema: posts
      /follow:
        type: baseResource
        post:
          is: [ hasSession, oauth ]
          body:
            application/json:
              schema: follow
          responses:
            200:
              body:
                application/json:
                  schema: update
/posts:
  /~{field_selectors}:
    type:  { fieldSelectorCollection: {type : post} }
    get:
      is: [ paged, oauth ]
      queryParameters:
        keywords:
          type: string
      responses:
        200:
          body:
            application/json:
              schema: posts
    post:
      is: [ hasSession, oauth ]
      body:
        application/json:
          schema: post
      responses:
        200:
          body:
            application/json:
              schema: update
  /{postId}:
    type:  { member : {type : post} }
    get:
      is: [ oauth ]
      responses:
        200:
          body:
            application/json:
              schema: post
    put:
      is: [ hasSession, oauth, hasModifiedFilter ]
      responses:
        200:
          body:
            application/json:
    patch:
      is: [ hasSession, oauth, hasModifiedFilter ]
      responses:
        200:
          body:
            application/json:
    /~:
      /like:
        type: baseResource
        post:
          body:
            application/json:
              schema: like-update
          responses:
            200:
              body:
                application/json:
                  schema: update
      /review:
        type: baseResource
        post:
          is: [ hasSession, oauth]
          body:
            application/json:
              schema: content
